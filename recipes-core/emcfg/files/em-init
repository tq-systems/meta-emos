#!/bin/sh

export PATH=/usr/bin:/bin:/usr/sbin:/sbin

DEV_APPS=/dev/mmcblk0p5
DEV_UPDATE=/dev/mmcblk0p6
DEV_CFGLOG=/dev/mmcblk0p7
DEV_DATA=/dev/mmcblk0p8
DEV_AUTH=/dev/mmcblk0p9
DEV_SERVICE=/dev/mmcblk0p10

MOUNT_OPTS_RO="nosuid,nodev,ro"
MOUNT_OPTS_RW="nosuid,nodev,noatime"

haveged_running=false
END_OF_LIFE=false
FSCK_REBOOT=false
FSCK_TMP_LOG="/run/em/fsck.log"

fatal() {
	echo >&2 "$1"
	exit 1
}

add_config() {
	local file="$1"
	local src="/cfglog/system/${file}" dest="/etc/${file}"
	mount --bind "$src" "$dest" || fatal "Failed to bind ${src}."
}

start_haveged() {
	$haveged_running || haveged
	haveged_running=true
}

stop_haveged() {
	if $haveged_running; then
		killall haveged
		haveged_running=false
	fi
}

check_flag() {
	if [ -e "/update/$1" ]; then
		echo 'true'
	else
		echo 'false'
	fi
}

factory_reset() {
	local reset_data=$1

	# Gather entropy for mkfs.ext4
	start_haveged

	mkfs.ext4 -Fvj $DEV_APPS
	mkfs.ext4 -Fvj $DEV_CFGLOG

	if $reset_data; then
		mkfs.ext4 -Fvj $DEV_DATA

		# Set flag for resetting the energy meter readings
		mount -o $MOUNT_OPTS_RW $DEV_CFGLOG /cfglog || fatal '/cfglog mount failed.'

		DIR_CFGLOG_TERIDIAN="/cfglog/apps/teridiand"
		FLAG_RESET_METER="$DIR_CFGLOG_TERIDIAN/reset-meter"

		mkdir -p "$DIR_CFGLOG_TERIDIAN"
		touch $FLAG_RESET_METER && sync $FLAG_RESET_METER

		umount /cfglog
	fi
}

data_reset() {
	echo >&2 'Formatting /data.'

	# Gather entropy for mkfs.ext4
	start_haveged

	mkfs.ext4 -Fvj $DEV_DATA
}

update_reset() {
	echo >&2 'Formatting /update.'

	# Gather entropy for mkfs.ext4
	start_haveged

	mkfs.ext4 -Fvj $DEV_UPDATE
}

backup_restore() {
	tar -C / -xzf /update/backup.tar.gz
}

# Delete files that may not be restored from backups
# (because they constitute a security risk)
backup_sanitize() {
	rm -f /cfglog/system/password
}

check_filesystem() {
	local partition="$1"
	local part_name="$2"

	MAX_COUNT="$(tune2fs -l "$partition" | awk -F':[[:blank:]]*' '/^Maximum mount count:/ {print $2}')"
	if [ "$MAX_COUNT" = "-1" ]; then
		# set check interval to 6 months
		tune2fs -i 6m "$partition"
		# set max mount counts to 30 (mkfs.ext4 creates a random number between 20 and 40)
		tune2fs -c 30 "$partition"
	fi

	mkdir -p /run/em
	fsck -a "$partition" 2>> $FSCK_TMP_LOG
	local fsck_return="$?"

	# return code = 2 requests a reboot
	if [ "$fsck_return" = "2" ]; then
		FSCK_REBOOT=true
	fi

	# return code > 2 -  should be logged persistently
	if [ "$fsck_return" -gt "2" ]; then
		echo "Fsck found an error checking $part_name: $fsck_return" >> $FSCK_TMP_LOG
		# The file /run/fsck_status is written only on return codes greater than 2.
		# It is used as a start condition for em-log-fsck-errors.service and the return
		# codes are used by the health-check app.
		echo "$fsck_return" >> /run/em/fsck_status
	fi
}

[ $$ -eq 1 ] || fatal 'em-init must run as PID1.'


[ -e /dev/console ] || mount -t devtmpfs devtmpfs /dev || fatal '/dev mount failed.'

# Initialize stdout and stderr
exec >/dev/console 2>/dev/console

mount -t proc proc /proc || fatal '/proc mount failed.'
mount -t sysfs sysfs /sys || fatal '/sys mount failed.'
mount -t tmpfs -o nosuid,nodev,mode=755 run /run || fatal '/run mount failed.'
mount -t tmpfs -o nosuid,nodev,mode=755 tmpfs /tmp || fatal '/tmp mount failed.'

# End of life status
mkdir -p /run/lock

if [ "$(fw_printenv -n END_OF_LIFE 2>/dev/null)" = "1" ]; then
	END_OF_LIFE=true
fi

# Mount eMMC partitions

# This check handles power loss during factory reset.
# As /update is formatted last, there are two possiblities for unfinished
# factory resets:
# 1) /update is not formatted yet. In this case, /update can still be mounted
#    and /update/factory-reset exists. The factory reset will be repeated on the
#    next boot.
# 2) /update is in the process of being formatted when the factory reset occurs.
#    In this case, the following mount may fail. In result, /update will be
#    formatted again, completing the factory reset.
if ! mount -o $MOUNT_OPTS_RW $DEV_UPDATE /update; then
	update_reset
	mount -o $MOUNT_OPTS_RW $DEV_UPDATE /update || fatal '/update mount failed.'
fi

FACTORY_RESET=$(check_flag factory-reset)

if $FACTORY_RESET && ! $END_OF_LIFE; then
	echo >&2 'Performing factory reset.'

	factory_reset true

	umount /update
	update_reset
	mount -o $MOUNT_OPTS_RW $DEV_UPDATE /update || fatal '/update mount failed.'
fi

SAFE_MODE=$(check_flag safe-mode)
BACKUP_RESTORE=$(check_flag backup-restore)

if $BACKUP_RESTORE && ! $END_OF_LIFE; then
	echo >&2 'Restoring backup.'

	factory_reset false
fi

# Check file systems of read/write mounted partitions
check_filesystem $DEV_APPS   "/apps"
check_filesystem $DEV_CFGLOG "/cfglog"
check_filesystem $DEV_DATA   "/data"

if [ -e $DEV_SERVICE ]; then
	check_filesystem $DEV_SERVICE "/cfglog/service"
fi


# Reboot if fsck wants it
$FSCK_REBOOT && reboot

mount -o $MOUNT_OPTS_RO $DEV_AUTH /auth || fatal '/auth mount failed.'
mount -o $MOUNT_OPTS_RW $DEV_CFGLOG /cfglog || fatal '/cfglog mount failed.'

if $BACKUP_RESTORE  && ! $END_OF_LIFE; then
	backup_restore
	backup_sanitize

	umount /update
	update_reset
	mount -o $MOUNT_OPTS_RW $DEV_UPDATE /update || fatal '/update mount failed.'
fi

# mount service partition if it exists
if [ -e $DEV_SERVICE ]; then
	mkdir -p /cfglog/service
	mount -o $MOUNT_OPTS_RW $DEV_SERVICE /cfglog/service || fatal '/cfglog/service mount failed.'
fi

if ! mount -o $MOUNT_OPTS_RW $DEV_DATA /data; then
	# When a backup import was interrupted while /data was being formatted,
	# the mount may fail. Rather than failing to boot, we will just try to
	# format it again.
	# To avoid formatting /data in other cases (potentially leading to data
	# loss), we only do so when the safe-mode, but not backup-restore is
	# set.
	# As long as backup-restore is not set, /update will not be formatted,
	# so we don't lose the safe-mode flag, indicating a failed backup
	# restore.
	$SAFE_MODE && ! $BACKUP_RESTORE || fatal '/data mount failed.'

	data_reset
	mount -o $MOUNT_OPTS_RW $DEV_DATA /data || fatal '/data mount failed.'
fi

mount -o $MOUNT_OPTS_RW $DEV_APPS /apps || fatal '/apps mount failed.'

stop_haveged

# Initialize default config
emcfg init

# Writable (simple) configuration files
add_config machine-id
add_config hostname

if command -v empkg >/dev/null; then
	if $END_OF_LIFE; then
		# This file is written once in EOL mode and indicates whether an EOL has been reached
		touch "/update/end_of_life"
		empkg --no-systemd --set-eol sync
	else
		# Sync new preinstalled apps in rootfs to appfs
		empkg --no-systemd sync
	fi
fi

# free /tmp as systemd mounts it with other options
umount /tmp

exec /lib/systemd/systemd
