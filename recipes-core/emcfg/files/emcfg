#!/bin/sh
# shellcheck disable=SC3043

PRODUCT_INFO=/etc/product-info.json
CFG=/cfglog/system
APPCFG=/cfglog/apps
RUNETC=/run/em/etc

NETCONF=/usr/lib/emos/network-config
RUNSDNET=/run/systemd/network

CFGNETWORKCONF=$CFG/network.json
PRESETSRUN=/apps/installed/presets/run

SCRIPT_NAME="$(basename "$0")"

CMD="$1"; shift

cmd_help() {
    cat <<END_OF_USAGE
Perform various actions on configurations of the Energy Manager.

Usage: $SCRIPT_NAME COMMAND

List of supported commands:
    init:
        Set up initial system configurations. Specifically, the config
        directory, machine id, host name, ntp and network config files
        are set up, and the preset run scripts are activated.
    update:             Update password, network, and NTP settings.
    update_(network|ntp):
        After updating these energy manager configs, propagate them to the
        respective system services.
    reset_(hostname|network|ntp|password):
        Reset individual configurations. Note that apps reading those
        configurations may need to be stopped/started before/after using the
        these commands.
    debug_access:       Enable debug access via SSH.
    factory_reset:      Reset device to factory defaults.
    restore_backup:     Import backup file from update partition.
    help:               Show this message.
END_OF_USAGE
}

get_serial() {
	cat /proc/device-tree/tq,serial-number 2>/dev/null || fw_printenv -n serial
}

get_default_hostname() {
	local product_code="$(jq -r '.code' <"$PRODUCT_INFO")"
	echo "${product_code}-$(get_serial)"
}

set_default_network() {
	local tmp_file=$CFGNETWORKCONF.tmp

	if [ -e /opt/apps/presets/system/network.json ]; then
		cp /opt/apps/presets/system/network.json "$tmp_file"
	else
		echo '{"mode":"dhcp"}' > "$tmp_file"
	fi
	sync "$tmp_file"
	mv "$tmp_file" "$CFGNETWORKCONF"
	sync "$CFGNETWORKCONF"
}

cmd_init() {
	mkdir -p $CFG

	[ -e $CFG/machine-id ] || touch $CFG/machine-id
	[ -e $CFG/hostname ]   || cmd_reset_hostname
	[ -e $CFG/ntp.json ]   || cmd_reset_ntp

	if [ ! -e $CFGNETWORKCONF ]; then
		set_default_network
	fi

	# transfer configs from app presets to /run, if any
	[ -e $PRESETSRUN ] && cp -r $PRESETSRUN/* /run
}

cmd_update_network() {
	#ethernet interface may be called eth0 before systemd renames it to end0
	local macaddr="$(cat /sys/class/net/eth0/address 2>/dev/null ||
			 cat /sys/class/net/end0/address 2>/dev/null)"
	local config

	if [ -e /sys/class/net/lan0 ]; then
		config=switch
	elif [ -e /sys/class/net/end1 ] || [ -e /sys/class/net/eth1 ] ; then
		config=double
	else
		config=single
	fi

	rm -rf $RUNSDNET
	mkdir -p $RUNSDNET

	for file in "$NETCONF/$config/"*; do
		ln -s "$file" $RUNSDNET/
	done

	jq \
		--arg macaddr "$macaddr" \
		-r '
"[Match]
Name=br0

[Link]
MACAddress=\($macaddr)

[DHCP]
ClientIdentifier=mac

[Network]
LinkLocalAddressing=yes",

if .mode == "static" then
	"DHCP=no",
	"Address=\(.address)/\(.prefixlen)",

	if .gateway then
		"Gateway=\(.gateway)"
	else
		empty
	end,
	(.dns // [] | map("DNS=\(.)") | .[])

else
	"DHCP=ipv4"
end,

if .hidden.address and .hidden.prefixlen then
	"\n[Address]",
	"Address=\(.hidden.address)/\(.hidden.prefixlen)",
	"Scope=link",
	"Label=preset",
	"PreferredLifetime=0"
else
	empty
end
	' < $CFGNETWORKCONF > $RUNSDNET/br0.network
}

cmd_update_ntp() {
	mkdir -p $RUNETC/systemd/

	jq -r '
"[Time]",
(.servers // [] | map("NTP=\(.)") | .[])
	' < $CFG/ntp.json > $RUNETC/systemd/timesyncd.conf
}

cmd_reset_hostname() {
	get_default_hostname > $CFG/hostname
}

cmd_reset_network() {
	logger 'Resetting network configuration.'

	set_default_network
	cmd_update_network
	systemctl restart systemd-networkd.service
}

cmd_reset_ntp() {
	echo '{"enable":true}' > $CFG/ntp.json
}

cmd_reset_password() {
	logger 'Resetting password configuration.'

	systemctl stop em-app-web-login
	# This resets all users - if we ever allow adding multiple users, we should not just delete the whole file
	rm $APPCFG/web-login/users.json
	systemctl start em-app-web-login

	rm -f $CFG/password
	em-update-password
}

cmd_debug_access() {
	logger 'Enabling SSH debug access.'

	systemctl --no-block start dropbear.socket
}

cmd_update() {
	em-update-password
	cmd_update_network
	cmd_update_ntp

	if [ "$(fw_printenv -n enable_ssh 2>/dev/null)" = '1' ]; then
		cmd_debug_access
	fi
}

cmd_factory_reset() {
	logger 'Performing factory reset.'

	touch /update/factory-reset
	reboot
}

cmd_restore_backup() {
	if [ ! -e '/update/backup.tar.gz' ]; then
		echo >&2 'No backup file found.'
		exit 1
	fi

	logger 'Importing backup.'
	touch /update/backup-restore
	reboot
}

case "$CMD" in
init|\
update|\
update_network|\
update_ntp|\
reset_hostname|\
reset_network|\
reset_ntp|\
reset_password|\
debug_access|\
factory_reset|\
restore_backup|\
help)
	"cmd_$CMD"
	;;

*)
	echo >&2 "$SCRIPT_NAME: Unknown command. Use '$SCRIPT_NAME help' to get help."
	exit 1
esac
