#!/usr/bin/env python3

# Copyright (c) 2019, TQ-Systems GmbH

import argparse
from datetime import datetime
import hashlib
import json
import lzma
import os
import re
import shutil
import subprocess
import sys
import tarfile
import textwrap
from urllib.parse import urlparse
import yaml


BASE_DIR = os.path.dirname(os.path.abspath(__file__))

parser = argparse.ArgumentParser(description='Build Energy Manager bundles')
parser.add_argument('--arch', required=True, help='CPU architecture of included app packages')
parser.add_argument('--download-dir', default='downloads', help='Directory for app downloads')
parser.add_argument('--bundle-spec', required=True, action='append',
	help='Bundle specification. May be passed multiple times.',
)
parser.add_argument('--compression', action='store_true', help='Compress rootfs and apps inside the bundles')

subparsers = parser.add_subparsers(title='commands', description='valid commands')

parser_download = subparsers.add_parser('download', help='Download app packages referenced in the base and bundle specs')

def device_subtype(s):
	try:
		ret = json.loads(s)
		for value in ret.values():
			assert(isinstance(value, str))
	except:
		raise ValueError

	return ret

def manufacturer_id(s):
	return int(s, 0)

def product_id(s):
	try:
		ret = json.loads(s)
		for value in ret.values():
			assert(isinstance(value, int))
	except:
		raise ValueError

	return ret

parser_build = subparsers.add_parser('build')
parser_build.add_argument('--build-dir', default='tmp', help='Directory for temporary build artifacts')
parser_build.add_argument('--bundle-version', help='Bundle version number')
parser_build.add_argument('--machine', required=True, help='Machine name for core image and compatible string')
parser_build.add_argument('--bootloader', required=True, action='append', nargs=2, help='Bootloader for variant')
parser_build.add_argument('--device-type', required=True, help='Device type for GUI reference')
parser_build.add_argument('--device-subtype', required=False, type=device_subtype, help='Map from device compatible to device type (JSON object)')
parser_build.add_argument('--manufacturer-id', required=False, type=manufacturer_id, help='Alternative manufacturer ID for Modbus (integer)')
parser_build.add_argument('--product-id', required=False, type=product_id, help='Map from device compatible to product ID for Modbus (JSON object)')
parser_build.add_argument('--rauc-key', required=True, help='Private key for bundle signature')
parser_build.add_argument('--rauc-cert', required=True, help='Certificate for bundle signature')
parser_build.add_argument('--rauc-keyring', required=True,
help='Certificate authority to be included in the image. Bundles are verified against this CA on system upgrades.')
parser_build.add_argument('--core-image', required=True, help='Core image used to generate bundle')
parser_build.add_argument('--image-name', required=True,
	help='Image name of the generated bundle. This is included in the compatible string and various filenames by default.',
)
parser_build.add_argument('--migration-exec', help='Pre-update migration executable')
parser_build.add_argument('--output-bundle', required=True, help='Output bundle filename')
parser_build.add_argument('--disable-firewall', action='store_true', help='Disable the em-firewall service in the bundle')


def filehash(path):
	"""Returns the SHA256 hash of a file."""

	m = hashlib.sha256()

	with open(path, 'rb') as f:
		while True:
			data = f.read(64 * 1024)
			if not data:
				break
			m.update(data)

	return m.hexdigest()

def checkhash(path, expected):
	"""Checks whether the SHA256 hash of a file matches an expected value and raises an exception otherwise."""

	expected = expected.lower()
	actual = filehash(path).lower()
	if expected != actual:
		raise Exception('Incorrect SHA256 checksum on file \'{}\' (expected {}, actual {})'.format(path, expected, actual))

def updatehash(app_data, path, cache):
	"""Downloads checksum file for app package and update sha256 in its info structure."""
	checksum_url = '{}.sha256'.format(app_data.url)
	checksum_path = '{}.sha256'.format(path)

	# download hash file if this is not already in the cache and should be used
	if cache != True or not os.access(checksum_path, os.R_OK):
		try:
			subprocess.run(['wget', '-nv', '-O', checksum_path, checksum_url], check=True)
		except Exception as e:
			print('Error downloading checksum file \'{}\''.format(checksum_url), file=sys.stderr, flush=True)
			raise e

	app_data.sha256 = open(checksum_path, 'r').read().strip()
	return app_data

def checkstring(s):
	"""
	Checks whether a string is composed from "safe" characters.

	At the moment, this only excludes the forward slash, as it is used as a separator in the compatible string.
	"""
	return bool(re.fullmatch(r'[^/]+', s))


def merge_dicts(a, b):
	ret = {}

	for k, av in a.items():
		ret[k] = av
	for k, bv in b.items():
		av = ret.get(k)
		if isinstance(av, dict) and isinstance(bv, dict):
			ret[k] = merge_dicts(av, bv)
		else:
			ret[k] = bv

	return ret


class AppData:
	"""Common information derived from app info"""

	def __init__(self, app_info):
		self.url = app_info['url'].format(**app_info)
		self.filename = urlparse(self.url).path.rpartition('/')[2]
		self.arch = app_info['arch']
		self.sha256 = app_info.get('sha256[{}]'.format(self.arch))
		self.disabled = app_info.get('disabled')
		self.version = app_info.get('version')
		self.cache = app_info.get('cache')
		self.uncompressed = app_info.get('uncompressed')

class CommandCommon:
	"""Common functions for all commands"""

	def __init__(self, args):
		self.args = args

		self.bundle_spec = {}

		for spec in self.args.bundle_spec:
			with open(spec, 'r') as f:
				bundle_spec = yaml.safe_load(f)
				self.bundle_spec = merge_dicts(self.bundle_spec, bundle_spec)

		self.defaults = self.bundle_spec['defaults']
		self.defaults['arch'] = self.args.arch

		self.apps = self.bundle_spec['apps']

	def app_data(self, app, info):
		"""
		Returns the app data for an app.
		"""
		app_info = merge_dicts(self.defaults, info)

		# The values 'name' and 'variant' can optionally be defined in a bundle definition to
		# change the app URL, which is by default: $BASE_URL/{app}/{name}_{version}_{arch}.empkg
		name = app

		# 'name' changes only {name}
		if 'name' in app_info:
			name = app_info['name']
		else:
		# 'variant' cannot be mixed with 'name', it extends {app} with a variant subdirectory
		# and {name} to this URL: $BASE_URL/{app}/{variant}/{app}-{variant}_{version}_{arch}.empkg
			if 'variant' in app_info:
				name = "%s-%s" % (app, app_info['variant'])
				app = "%s/%s" % (app, app_info['variant'])

		app_info = merge_dicts(app_info, {
			'app': app,
			'name': name
		})

		# Set cache to "False" if there is no setting in app or defaults
		if 'cache' not in app_info:
			app_info = merge_dicts(app_info, {
				'cache': False
		})

		return AppData(app_info)

class CommandDownload(CommandCommon):
	"""Implementation of the 'download' command"""

	def download_app(self, app, info):
		"""
		Given an app name and its info structure, download the app package using wget.

		When the app package is already cached and the file hash matches the expected value, the download is
		skipped.
		"""

		app_data = self.app_data(app, info)
		path = os.path.join(self.args.download_dir, app_data.filename)

		# Checksum handling of these versions is skipped
		skip_versions = {'stable', 'latest'}

		if (app_data.version not in skip_versions) and (app_data.cache != False):
			if app_data.sha256 is None:
				updatehash(app_data, path, app_data.cache)

			if os.access(path, os.R_OK):
				try:
					checkhash(path, app_data.sha256)
					print('App \'{}\' found in cache.'.format(app), file=sys.stderr, flush=True)
					return
				except:
					pass

		print('Downloading app \'{}\' from: {}'.format(app, app_data.url), file=sys.stderr, flush=True)

		subprocess.run(['wget', '-nv', '-O', path, app_data.url], check=True)

		if app_data.version in skip_versions:
			print('Skipping SHA256 check for app \'{}\' because version is \'{}\''.format(app, app_data.version))
		else:
			if app_data.sha256 is None:
				updatehash(app_data, path, app_data.cache)
			if app_data.cache != False or app_data.sha256 is not None:
				checkhash(path, app_data.sha256)

	def download_apps(self):
		"""Download all apps listed in the base and bundle specs"""

		for app, info in self.apps.items():
			if info != None:
				try:
					self.download_app(app, info)
				except Exception as e:
					print('Error downloading \'{}\''.format(app), file=sys.stderr, flush=True)
					raise e

	def run(self):
		os.makedirs(self.args.download_dir, exist_ok=True)
		self.download_apps()

class CommandBuild(CommandCommon):
	"""Implementation of the 'build' command"""

	def __init__(self, args):
		CommandCommon.__init__(self, args)

		self.root_dir = os.path.join(self.args.build_dir, 'root')
		self.app_install_dir = os.path.join(self.root_dir, 'opt', 'apps')
		self.uncompressed_app_install_dir = os.path.join(self.root_dir, 'opt')
		self.bundle_dir = os.path.join(self.args.build_dir, 'bundle')
		self.build_image = os.path.join(self.args.build_dir, 'em-image-{}-{}.tar'.format(self.args.image_name, self.args.machine))
		self.build_image_compressed = os.path.join(self.args.build_dir, 'em-image-{}-{}.tar.xz'.format(self.args.image_name, self.args.machine))
		self.bundle_apps = os.path.join(self.root_dir, 'opt', 'apps.squashfs')

	def prepare(self):
		"""Prepares for the build by removing old build artifacts and creating directories."""

		try:
			shutil.rmtree(self.args.build_dir)
		except FileNotFoundError:
			pass

		try:
			os.remove(self.args.output_bundle)
		except FileNotFoundError:
			pass

		os.makedirs(self.uncompressed_app_install_dir)
		os.makedirs(self.app_install_dir)
		os.makedirs(self.bundle_dir)

	def install_app(self, app, info):
		"""Unpacks an app to the app install dir."""

		app_data = self.app_data(app, info)
		path = os.path.join(self.args.download_dir, app_data.filename)

		with tarfile.open(path, mode='r:') as empkg:
			with empkg.extractfile('manifest.json') as manifest_json:
				manifest = json.load(manifest_json)

			# compression enabled - prepare for uncompressed apps
			dirname = os.path.join(self.app_install_dir, manifest['id'])
			if self.args.compression and app_data.uncompressed == True:
				uncompressed_dirname = os.path.join(self.uncompressed_app_install_dir, manifest['id'])
				os.mkdir(uncompressed_dirname)
			else:
				os.mkdir(dirname)

			with empkg.extractfile('data.tar.xz') as data_tar:
				with tarfile.open(fileobj=data_tar, mode='r:xz') as data:
					# compression enabled and this app should be uncompressed, extract it to separate folder
					if self.args.compression and app_data.uncompressed == True:
						data.extractall(uncompressed_dirname)
						relpath = os.path.relpath(uncompressed_dirname, start=self.app_install_dir)
						try:
							os.symlink(relpath, dirname)
						except FileExistsError:
							if os.path.islink(dirname) and os.readlink(dirname) == relpath:
								pass
							else:
								raise Exception('{} already exists and is not the expected symlink.'.format(dirname))
					else:
						data.extractall(dirname)

			# if app is flagged as 'disabled' in the bundle_spec
			# also flag it 'disabled' in its manifest.json in the correct appdir:
			if self.args.compression and app_data.uncompressed == True:
				use_dir_name = uncompressed_dirname
			else:
				use_dir_name = dirname

			if app_data.disabled != None:
				manifest['disabled'] = app_data.disabled
				with open(os.path.join(use_dir_name, 'manifest.json'), 'w') as f:
					json.dump(manifest, f, sort_keys=True)
			else:
				empkg.extract('manifest.json', use_dir_name)

	def install_apps(self):
		"""Unpacks all apps to the app install dir."""

		for app, info in self.apps.items():
			if info != None:
				try:
					self.install_app(app, info)
				except Exception as e:
					print('Error installing \'{}\''.format(app), file=sys.stderr, flush=True)
					raise e

	def get_description(self):
		return 'EM bundle {}'.format(self.args.image_name)

	def get_compatible(self):
		ret = self.bundle_spec.get('compatible', self.args.image_name)

		if not checkstring(ret):
			raise Exception('Invalid compatible string \'{}\''.format(ret))
		return ret

	def get_version(self):
		"""
		Returns the version number to be added to the product info and the bundle manifest.

		A bundle version passed on the command line always takes predence; otherwise,
		product_info.software_version from the bundle spec is used.
		"""

		if self.args.bundle_version != None:
			ret = self.args.bundle_version
		else:
			ret = self.bundle_spec['product_info'].get('software_version', '0')

		if not checkstring(ret):
			raise Exception('Invalid version string \'{}\''.format(ret))
		return ret

	def get_compatible_bundle(self):
		"""
		Returns a compatible string for the bundle manifest.

		The compatible string has the format $MACHINE/$COMPATIBLE, where $COMPATIBLE is set in the bundle spec,
		falling back to the bundle name if unset in the spec.
		"""

		machine = self.args.machine

		if not checkstring(machine):
			raise Exception('Invalid machine string \'{}\''.format(machine))

		return '{}/{}'.format(machine, self.get_compatible())

	def get_compatible_config(self):
		"""
		Returns a compatible string for the RAUC config.

		The compatible string has the format $MACHINE/$COMPATIBLE/1/$VERSION, where $MACHINE/$COMPATIBLE is
		generated as described in get_compatible_bundle(), 1 the version of the compatible string format, and
		$VERSION is the bundle version.
		"""

		return '{}/1/{}'.format(self.get_compatible_bundle(), self.get_version())

	def get_device_type(self):
		"""
		Returns the device type to be added to the product info.

		The device type is assigned via the machine and visible in the GUI and in the bundle file name.
		"""

		return self.args.device_type

	def get_device_subtype(self):
		"""
		Returns the device subtype map to be added to the product info.

		The device subtype is assigned via the machine and overrides the device type displayed in the GUI.
		"""

		return self.args.device_subtype

	def get_manufacturer_id(self):
		"""
		Returns the manufacturer ID to be added to the product info.

		The manufacturer ID is assigned via the machine and can be queried via Modbus.
		"""

		return self.args.manufacturer_id

	def get_product_id(self):
		"""
		Returns the product ID to be added to the product info.

		The product ID is assigned via the machine and can be queried via Modbus.
		"""

		return self.args.product_id

	def write_product_info(self):
		"""Writes the product info from the bundle spec to /etc/product-info.json in the image root"""

		info = self.bundle_spec['product_info']
		machine = self.args.machine
		name, code = self.get_name_and_code(info, machine)

		def optional(key, value):
			if value is None:
				return {}
			else:
				return {key: value}

		etcdir = os.path.join(self.root_dir, 'etc')
		os.makedirs(etcdir, exist_ok=True)
		with open(os.path.join(etcdir, 'product-info.json'), 'w') as f:
			json.dump({
				'manufacturer': info['manufacturer'],
				'manufacturer_url': info['manufacturer_url'],
				'code': code,
				'name': name,
				'devicetype': self.get_device_type(),
				'software_version': self.get_version(),
				'creation_year': str(datetime.today().year),
			} |
			optional('devicesubtype', self.get_device_subtype()) |
			optional('manufacturer_id', self.get_manufacturer_id()) |
			optional('product_id', self.get_product_id()),
			f, sort_keys=True)

	def get_name_and_code(self, info, machine):
		"""Returns the code and name for specific manufacturer and hardware"""
		name_key = "name_" + machine
		if name_key in info:
			name = info[name_key]
		else:
			# fallback when unified toolchain with machine == "em-aarch64"
			# builds bundle with old product_info (name_em4xx)
			name_key = "name_em4xx"
			if name_key in info:
				name = info[name_key]
			else:
				name = info['name']

		code_key = "code_" + machine
		if code_key in info:
			code = info[code_key]
		else:
			# fallback when unified toolchain with machine == "em-aarch64"
			# builds bundle with old product_info (code_em4xx)
			code_key = "code_em4xx"
			if code_key in info:
				code = info[code_key]
			else:
				code = info['code']

		return name, code

	def get_rauc_config(self):
		"""Returns the RAUC config to be written to /etc/rauc/system.conf in the image root"""

		return textwrap.dedent(f'''\
			[system]
			compatible={self.get_compatible_config()}
			bootloader=uboot
			statusfile=/update/rauc.status
			bundle-formats=plain

			[keyring]
			path=/etc/rauc/ca.cert.pem
			use-bundle-signing-time=true

			[slot.u-boot.0]
			device=/dev/mmcblk0
			type=raw

			[slot.rootfs.0]
			device=/dev/mmcblk0p2
			type=ext4
			bootname=1

			[slot.rootfs.1]
			device=/dev/mmcblk0p3
			type=ext4
			bootname=2
			''')

	def write_rauc_config(self):
		"""Writes the RAUC config and keyring to /etc/rauc/ in the image root"""

		raucdir = os.path.join(self.root_dir, 'etc', 'rauc')
		os.makedirs(raucdir, exist_ok=True)
		with open(os.path.join(raucdir, 'system.conf'), 'w') as f:
			f.write(self.get_rauc_config())

		shutil.copyfile(self.args.rauc_keyring, os.path.join(raucdir, 'ca.cert.pem'))

	# Filter to exclude uncompressed apps
	# The inner function is required because the filter= callback
	# from tarfile.add() does not support adding arbitrary parameters.
	# Once exclude_apps_filter(True) or ...(False) is called,
	# tarinfo() is prepared with "exclude_apps" being set,
	# and a reference to this tarinfo() is then returned to
	# the caller of exclude_apps_filter().
	def exclude_apps_filter(self, exclude_apps):
		def tarinfo(info):
			info.uid = 0
			info.gid = 0
			info.uname = ''
			info.gname = ''
			if '/opt/apps/' in info.name and exclude_apps:
				return None
			else:
				return info
		return tarinfo

	def disable_firewall(self):
		"""Disables the em-firewall service in the image root"""

		if not self.args.disable_firewall:
			return

		# The em-firewall service is enabled by a symlink in /etc/systemd/system/multi-user.target.wants/ and
		# disabled by removing this symlink.
		temp_tar_path = self.build_image + ".tmp"
		with tarfile.open(self.build_image, "r:") as tar:
			with tarfile.open(temp_tar_path, "w:") as temp_tar:
				for member in tar.getmembers():
					if member.name != './etc/systemd/system/multi-user.target.wants/em-firewall.service':
						temp_tar.addfile(member, tar.extractfile(member) if member.isfile() else None)

		os.replace(temp_tar_path, self.build_image)

	def rootfs_size_check(self):
		"""Checks if the rootfs tarfile is larger that a given rootfs size limit"""

		# size-check the tarfile
		# Writable in filesystem: 354064 kiB (345.77 MiB) -> round to 340 MiB
		# When user requests a different limit through rootfs_limit flag in bundle_spec defaults, respect that
		if 'rootfs_limit' in self.defaults:
			sizelimit = self.defaults['rootfs_limit']
		else:
			sizelimit = 356515840

		if os.path.getsize(self.build_image) > sizelimit:
			raise Exception('The rootfs limit ({} B) is exceeded. Actual size is {} Bytes.'.format(sizelimit, os.path.getsize(self.build_image)))

	def pack_image(self):
		"""
		Creates the rootfs image.

		A copy of the core image tar is created, then the additional files
		(apps as xz-compressed squashfs, RAUC config, product info) is
		appended.
		"""

		# We copy the symlink'd archive at 'self.args.core_image'
		# to 'build_dir/build_image' ...

		shutil.copyfile(self.args.core_image, self.build_image)

		# After copying the core image, we can remove the firewall service
		self.disable_firewall()

		# If no compression desired, we simply append RAUC config,
		# product info and all uncompressed apps into the archive
		# and exit early, skipping all compression steps below
		tarfilter = self.exclude_apps_filter(False)
		if not self.args.compression:
			with tarfile.open(self.build_image, mode='a:') as tar:
				tar.add(self.root_dir, '.', filter=tarfilter)
			self.rootfs_size_check()
			return

		# With compression, we compress the downloaded apps to 'root_dir/opt/apps.squashfs'
		# The parameters for mksquashfs are:
		#	-b 128K			a large block size (max. 1M) allows more efficient compression
		#				but also requires larger blocks to decompress on read
		#	-comp lz4		use lz4 compressor (fair compression ratio, fastest decompression read speed)
		#	-Xhc			high compression mode
		command = ['mksquashfs', self.app_install_dir, self.bundle_apps, '-b','128K','-comp','lz4','-Xhc','-all-root']
		subprocess.run(command, check=True)

		# ... then we collect RAUC config, product info and the compressed apps image
		# into the core-image copy tarfile

		tarfilter = self.exclude_apps_filter(True)
		with tarfile.open(self.build_image, mode='a:') as tar:
			tar.add(self.root_dir, '.', filter=tarfilter)

		self.rootfs_size_check()

		# ... and finally the tarfile gets xz-compressed

		with open(self.build_image, 'rb') as tar:
			with lzma.open(self.build_image_compressed, 'xb', preset=9|lzma.PRESET_EXTREME) as xz:
				shutil.copyfileobj(tar, xz)

	def get_manifest(self, suffix):
		"""Returns the RAUC manifest to be added to the bundle."""

		return textwrap.dedent(f'''\
			[update]
			description={self.get_description()}
			compatible={self.get_compatible_bundle()}
			version={self.get_version()}

			[hooks]
			filename=hook.sh
			hooks=install-check

			[image.rootfs]
			filename=em-image-{self.args.image_name}-{self.args.machine}.{suffix}

			[image.u-boot]
			filename=bootloaders.txt
			hooks=install
			''')

	def make_bundle(self):
		"""
		Creates the RAUC bundle

		In addition to the root filesystem, U-Boot is added to the bundle as a separate image. For this purpose,
		U-Boot is extracted from the core image.
		"""

		# Add rootfs to bundle
		if not self.args.compression:
			shutil.move(self.build_image, self.bundle_dir)
		else:
			shutil.move(self.build_image_compressed, self.bundle_dir)

		with tarfile.open(self.args.core_image, mode='r:') as tar:
			# Check machine name
			with tar.extractfile('./etc/os-machine') as src:
				image_machine = src.read().decode().strip()
				if image_machine != self.args.machine:
					raise Exception(
						'Invalid core image: machine is \'{}\', expected \'{}\''.format(
							image_machine, self.args.machine))

		# Add bootloaders to bundle

		with open(os.path.join(self.bundle_dir, 'bootloaders.txt'), 'w') as bootloaders_txt:
			bootloader_files = {}
			for config, src in self.args.bootloader:
				name = f'bootloader-{config}.bin'
				dst = os.path.join(self.bundle_dir, name)

				if src not in bootloader_files:
					bootloader_files[src] = name
					shutil.copyfile(src, dst)
				else:
					os.symlink(bootloader_files[src], dst)

				sha256 = filehash(dst)
				bootloaders_txt.write(f'{sha256} {config}\n')

		# Add install hook + helpers to bundle
		shutil.copyfile(
			os.path.join(BASE_DIR, '..', 'share', 'emit', 'hook.sh'),
			os.path.join(self.bundle_dir, 'hook.sh'),
		)
		os.chmod(os.path.join(self.bundle_dir, 'hook.sh'), 0o755)
		shutil.copyfile(
			os.path.join(BASE_DIR, '..', 'share', 'emit', 'ramsize.sh'),
			os.path.join(self.bundle_dir, 'ramsize.sh'),
		)
		os.chmod(os.path.join(self.bundle_dir, 'ramsize.sh'), 0o755)
		shutil.copyfile(
			os.path.join(BASE_DIR, '..', 'share', 'emit', 'bootloader-{}.sh'.format(self.args.machine)),
			os.path.join(self.bundle_dir, 'bootloader.sh'),
		)
		os.chmod(os.path.join(self.bundle_dir, 'bootloader.sh'), 0o644)

		if self.args.migration_exec is not None:
			shutil.copyfile(self.args.migration_exec, os.path.join(self.bundle_dir, 'migration'))
			os.chmod(os.path.join(self.bundle_dir, 'migration'), 0o755)

		# Generate manifest
		with open(os.path.join(self.bundle_dir, 'manifest.raucm'), 'w') as manifest:
			if not self.args.compression:
				manifest.write(self.get_manifest("tar"))
			else:
				manifest.write(self.get_manifest("tar.xz"))

		subprocess.run(['rauc', '--key=' + self.args.rauc_key, '--cert=' + self.args.rauc_cert, 'bundle', self.bundle_dir, self.args.output_bundle], check=True)

	def run(self):
		os.umask(0o022)

		self.prepare()
		self.install_apps()
		self.write_product_info()
		self.write_rauc_config()
		self.pack_image()
		self.make_bundle()


parser_download.set_defaults(cmd=CommandDownload)
parser_build.set_defaults(cmd=CommandBuild)

args = parser.parse_args()
args.cmd(args).run()
