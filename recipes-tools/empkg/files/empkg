#!/bin/sh

set -eo pipefail


BUILTIN_DIR="/opt/apps"
APPDIR="/apps"
CONFIGDIR="/cfglog/apps"
APPTMP="$APPDIR/tmp"
WWWDIR="$APPDIR/www"
WWWAPPS="$WWWDIR/apps.json"
WWWLANG="$WWWDIR/langs.json"
LICDIR="$APPDIR/licenses"
DBUSDIR="$APPDIR/dbus"


OPT_ENABLE=true
OPT_SYSTEMD=true
OPT_PLAIN=false
OPT_EOL=false


usage() {
	cat >&2 <<'EOF'
Usage: empkg help
       empkg list
       empkg list-installed
       empkg list-enabled
       empkg list-autostart
       empkg status [<app>]
       empkg info <pkg>
       empkg install <pkg>
       empkg uninstall <app>
       empkg enable|disable <app>
EOF
}


is_valid_name() {
	echo "$1" | grep -qE '^[a-z0-9-]+$'
}

is_builtin() {
	is_valid_name "$1" && [ -d "$BUILTIN_DIR/$1" ]
}

is_installed() {
	is_valid_name "$1" && [ -d "$APPDIR/installed/$1" ]
}

is_enabled() {
	is_valid_name "$1" && [ -L "$APPDIR/enabled/$1" ]
}

has_systemd() {
	is_installed "$1" && [ -e "$APPDIR/installed/$1/em-app-$1.service" ]
}

# Prints an error message and exits
error() {
	echo >&2 "empkg: $1"
	exit 1
}

# Checks that an app is installed and exits with an error message otherwise
ensure_installed() {
	is_installed "$1" || error "app '$1' not found."
}

# Checks that an app is either installed or there is a leftover enabled symlink
ensure_installed_or_enabled() {
	local app="$1"
	( is_valid_name "$app" && [ -L "$APPDIR/enabled/$app" ] ) || ensure_installed "$app"
}

# Is called with the expected number of args and $#, exits with an error
# message if the number of args is incorrect
ensure_args() {
	[ $1 -eq $2 ] || {
		usage
		exit 1
	}
}


# Prints the manifest of an installed app
app_info() {
	local app="$1"
	ensure_installed "$app"
	cat "$APPDIR/installed/$app/manifest.json"
}

is_essential() {
	local app="$1"
	# The essential flag is ignored for non-builtin apps
	is_builtin "$app" && app_info "$app" | jq -e '.essential' >/dev/null
}

is_autostart() {
	local app="$1"
	# The autostart flag defaults to true
	is_enabled "$app" && app_info "$app" | jq -e '.autostart != false' >/dev/null
}


# Transforms a list of newline-separated strings to a JSON array
# (unless the --plain option is set)
output_array() {
	if $OPT_PLAIN; then
		cat
	else
		jq -nR '[inputs]'
	fi
}

app_config() {
	local app="$1"

	mkdir -p "$CONFIGDIR"
	( umask 0077 && mkdir -p "$CONFIGDIR/$app" )
}


# Prints the names of all installed apps, separated by newlines
list_installed() {
	local appdir
	for appdir in "$APPDIR"/installed/*; do
		# busybox does not have nullglob -
		# the case that no apps are installed is handled here
		[ -d "$appdir" ] || continue

		echo "$(basename "$appdir")"
	done
}

# Prints the names of all enabled apps, separated by newlines
list_enabled() {
	local app
	for app in $(list_installed); do
		is_enabled "$app" || continue
		echo "$app"
	done
}

# Prints the names of all apps that autostart their backend services, separated by newlines
list_autostart() {
	local app
	for app in $(list_installed); do
		is_autostart "$app" || continue
		echo "$app"
	done
}

list_apps() {
	local app
	local list
	for app in $(list_installed); do
		app="$app - $(app_info "$app" | jq -re '.version')"
		if [ -z "$list" ]; then
			list="$app"
		else
			list="$list
$app"
		fi
	done
	echo "$list"
}

# Updates the dbus policy provided by an app
app_dbus() {
	local app="$1"
	local conf="$APPDIR/installed/$app/dbus.conf"

	if [ -r "$conf" ] && is_enabled "$app"; then
		rm -rf "$APPTMP/dbus"
		mkdir -p "$APPTMP/dbus"

		cp -f "$conf" "$APPTMP/dbus/$app.conf"
		mv -f "$APPTMP/dbus/$app.conf" "$DBUSDIR/$app.conf"

		rm -rf "$APPTMP/dbus"
	else
		rm -f "$DBUSDIR/$app.conf"
	fi
}

# Registers an builtin app as installed
app_register() {
	local app="$1"
	is_builtin "$app" || error "tried to register app '$app', but it is not builtin."

	[ -e "$APPDIR/installed/$app" ] || ln -snf "$BUILTIN_DIR/$app" "$APPDIR/installed/$app"
}

# Enables an app
app_enable() {
	local app="$1"
	ensure_installed "$app"

	app_config "$app"

	mkdir -p "$APPDIR/enabled"
	ln -snf "../installed/$app" "$APPDIR/enabled/$app"

	app_dbus "$app"

	if $OPT_SYSTEMD && has_systemd "$app"; then
		systemctl daemon-reload

		if is_autostart "$app"; then
			systemctl restart "em-app-${app}.service" || true
		else
			systemctl try-restart "em-app-${app}.service" || true
		fi
	fi
}

# Disables an app
app_disable() {
	local app="$1"
	ensure_installed_or_enabled "$app"

	! is_essential "$app" || error "unable to disable essential app '$app'."

	rm -f "$APPDIR/enabled/$app"

	if $OPT_SYSTEMD && systemctl --quiet is-active "em-app-${app}.service"; then
		systemctl stop "em-app-${app}.service" || true
		systemctl daemon-reload
	fi

	app_dbus "$app"
}

# Prints the current status and manifest information of an installed app
app_status() {
	local app="$1"
	ensure_installed "$app"

	local builtin=null
	if is_builtin "$app"; then builtin=true; fi

	local enabled=false
	if is_enabled "$app"; then enabled=true; fi

	app_info "$app" | jq \
		--argjson builtin "$builtin" \
		--argjson enabled "$enabled" \
		'{
			status: {
				builtin: $builtin,
				enabled: $enabled,
			} | with_entries(select(.value != null)),
			info: .,
		}'
}

# Prints a dictionaly containing the current status and manifest information of all installed apps
app_status_all() {
	local app
	for app in $(list_installed); do
		app_status "$app"
	done | jq -n '[inputs] | map({key: .info.id, value: .}) | from_entries'
}

# Prints the manifest of an app package
pkg_info() {
	local pkg="$1"
	tar -xOf "$pkg" manifest.json
}

# Installs or upgrades an app from a package file
pkg_install() {
	local pkg="$1"
	local info="$(pkg_info "$pkg")"

	local app="$(echo "$info" | jq -r '.id')"
	local version_old
	local version_new="$(echo "$info" | jq -r '.version')"

	local is_new=true
	if is_installed "$app"; then
		is_new=false
		version_old="$(app_info "$app" | jq -r '.version')"
	fi

	rm -rf "$APPTMP"

	if $is_new; then
		echo >&2 "Installing $app $version_new..."
	else
		echo >&2 "Updating $app $version_old to $version_new..."
	fi

	local appdir="$APPDIR/installed/$app"
	local installdir="$APPTMP/install"

	mkdir -p "$installdir"
	tar -xOf "$pkg" data.tar.xz | tar -xJC "$installdir"
	tar -xf "$pkg" -C "$installdir" manifest.json

	# Sync around app replacement to get it as atomic as possible
	sync
	if [ -e "$appdir" ]; then
		mv "$appdir" "$APPTMP/uninstall"
	fi
	mv "$APPTMP/install" "$appdir"
	sync

	rm -rf "$APPTMP"

	if $OPT_ENABLE; then
		app_enable "$app"
	else
		app_dbus "$app"
	fi
}

# Uninstalls an app
app_uninstall() {
	local app="$1"

	ensure_installed_or_enabled "$app"
	echo >&2 "Uninstalling $app..."

	if is_essential "$app"; then
		echo >&2 "Note: '$app' is essential, it will not be disabled."
	else
		app_disable "$app"
	fi

	rm -rf "$APPTMP"
	mkdir -p "$APPTMP"
	# Move inside the same filesystem to have an atomic operation
	mv "$APPDIR/installed/$app" "$APPTMP/uninstall"

	if is_builtin "$app"; then
		echo >&2 "Note: '$app' is builtin, only uninstalling updates."
		app_register "$app"
	fi

	app_dbus "$app"

	# Sync before removing directory tree, so the removal at
	# APPDIR/installed is always atomic
	sync

	rm -rf "$APPTMP"
}

# Registers all builtin apps into the main app dir, removes
# symlinks for apps that have disappered. New apps are automatically
# enabled.
#
# This is an internal command (called from emos-init), so it does not
# appear in usage
app_sync() {
	local appdir app conf new_apps

	# Disable apps that are not installed anymore
	for appdir in "$APPDIR"/enabled/*; do
		[ -L "$appdir" ] || continue
		app="$(basename "$appdir")"

		is_installed "$app" || app_disable "$app"
	done

	# Remove installed symlinks for apps that are not
	# builtin anymore
	for appdir in "$APPDIR"/installed/*; do
		[ -L "$appdir" ] || continue
		app="$(basename "$appdir")"

		[ -d "$BUILTIN_DIR/$app" ] || rm -f "$appdir"
	done

	mkdir -p "$APPDIR/installed/"
	mkdir -p "$DBUSDIR"

	# Link builtin apps into $APPDIR/installed
	for appdir in "$BUILTIN_DIR"/*; do
		# busybox does not have nullglob -
		# the case that no apps are installed is handled here
		# (as well as other unexpected files in BUILTIN_DIR)
		[ -d "$appdir" ] || continue

		app="$(basename "$appdir")"
		if [ -e "$APPDIR/installed/$app" ] && ! is_essential "$app"; then
			continue
		fi

		app_register "$app"

		new_apps="$app
$new_apps"
	done

	# Remove obsolete D-Bus policy files
	for conf in "$DBUSDIR"/*; do
		app="$(basename "$conf" .conf)"
		is_enabled "$app" || rm -f "$conf"
	done

	for app in $(list_enabled); do
		app_dbus "$app"
	done

	# Delay enabling apps until all new apps have been registered,
	# so potential dependencies between new apps are satisfied
	echo -n "$new_apps" | while read -r app; do
		app_enable "$app" || true
	done

	if $OPT_EOL; then
		for app in $(list_enabled); do
			is_essential "$app" || app_disable "$app"
		done
	fi
}

# Updates the web-container app directory (app symlinks, list JSON, langs JSON)
update_www() {
	rm -rf "$WWWDIR"
	mkdir -p "$WWWDIR"

	local app

	for app in $(list_enabled); do
		local index="$APPDIR/installed/$app/www/index.js"
		[ -r "$index" ] || continue

		local wwwdir="$(dirname "$index")"
		ln -snf "$wwwdir" "$WWWDIR/$app"

		echo "$app/index.js?$(md5sum "$index" | awk '{print $1}')"
	done | jq -nRc '[inputs]' > "$WWWAPPS".tmp
	mv -f "$WWWAPPS.tmp" "$WWWAPPS"

	for app in $(list_enabled); do
		local lang="$APPDIR/installed/$app/www/i18n/lang.js"
		[ -r "$lang" ] || continue

		echo "$app/i18n/lang.js?$(md5sum "$lang" | awk '{print $1}')"
	done | jq -nRc '[inputs]' > "$WWWLANG".tmp

	mv -f "$WWWLANG.tmp" "$WWWLANG"

	sync
}

update_licenses() {
	rm -rf "$LICDIR"
	mkdir -p "$LICDIR"

	local app

	for app in $(list_installed); do
		local app_license_dir="$APPDIR/installed/$app/license"
		[ -d "$app_license_dir" ] || continue

		local lic_info_dir="$LICDIR/$app"
		ln -snf "$app_license_dir" "$lic_info_dir"
	done

	sync
}

while [ "${1:0:1}" = '-' ]; do
	arg="$1"; shift
	case "$arg" in
	--no-enable)
		OPT_ENABLE=false
		;;

	--no-systemd)
		OPT_SYSTEMD=false
		;;

	--plain)
		OPT_PLAIN=true
		;;

	--set-eol)
		OPT_EOL=true
		;;

	*)
		usage
		exit 1
	esac
done


get_lock() {
	# Arbitrary lock fd that should be unused by the shell
	exec 1000>/var/lock/empkg.lock
	flock -n 1000 || error 'another instance of empkg is active.'
}


cmd="$1"; shift

case "$cmd" in
help)
	usage
	;;

list-installed)
	list_installed | output_array
	;;

list-enabled)
	list_enabled | output_array
	;;

list-autostart)
	list_autostart | output_array
	;;

list)
	list_apps
	;;

status)
	if [ $# -eq 0 ]; then
		app_status_all
	else
		ensure_args 1 $#
		app_status "$1"
	fi
	;;

info)
	ensure_args 1 $#
	pkg_info "$1" | jq .
	;;

install)
	ensure_args 1 $#
	get_lock
	pkg_install "$1"
	update_www
	update_licenses
	;;

uninstall)
	ensure_args 1 $#
	get_lock
	app_uninstall "$1"
	update_www
	update_licenses
	;;

enable)
	ensure_args 1 $#
	get_lock
	app_enable "$1"
	update_www
	;;

disable)
	ensure_args 1 $#
	get_lock
	app_disable "$1"
	update_www
	;;

sync)
	get_lock
	app_sync
	update_www
	update_licenses
	;;

*)
	usage
	exit 1
esac
