#!/bin/sh
# shellcheck disable=SC3043,SC3040,SC3037

set -eo pipefail

BUILTIN_DIR="/opt/apps"
APPDIR="/apps"
CONFIGDIR="/cfglog/apps"
APPTMP="$APPDIR/tmp"
WWWDIR="$APPDIR/www"
WWWAPPS="$WWWDIR/apps.json"
WWWLANG="$WWWDIR/langs.json"
LICDIR="$APPDIR/licenses"
DBUSDIR="$APPDIR/dbus"

RUNDIRAPPS="/run/em/apps"
USERDBRUNDIR="/run/host/userdb"
USERDBSTOREDIR="$APPDIR/userdb"

OPT_ENABLE=true
OPT_SYSTEMD=true
OPT_PLAIN=false
OPT_EOL=false

# App_sync() calls app_enable()/app_disable() for multiple apps,
# each prepares app service files that take effect after a lengthy 'systemctl daemon-reload'.
# To speed app_sync() up, it is sufficient to only call 'systemctl daemon-reload' once at the end.
# So app_enable() and app_disable() will only request a 'daemon-reload' by placing a temporary file.
# At the end of app_sync() the presence of this file is tested and will trigger the 'daemon-reload'.
REQUEST_DAEMON_RELOAD="$(mktemp -u)"

usage() {
	cat >&2 <<'EOF'
Usage: empkg help
       empkg list
       empkg list-installed
       empkg list-enabled
       empkg list-autostart
       empkg is-installed <app>		# sets non-0 exit code if false
       empkg is-enabled <app>		# sets non-0 exit code if false
       empkg status [<app>]
       empkg info <pkg>
       empkg install <pkg>
       empkg uninstall <app>
       empkg enable|disable <app>
EOF
}


is_valid_name() {
	echo "$1" | grep -qE '^[a-z0-9-]+$'
}

is_arch_supported() {
	local arch
	for arch in $(awk '{ print $2 }' /etc/opkg/arch.conf); do
		if [ "$1" = "$arch" ]; then
			return 0
		fi
	done

	return 1
}

is_builtin() {
	is_valid_name "$1" && [ -d "$BUILTIN_DIR/$1" ]
}

is_installed() {
	is_valid_name "$1" && [ -d "$APPDIR/installed/$1" ]
}

is_enabled() {
	is_valid_name "$1" && [ -L "$APPDIR/enabled/$1" ]
}

# Checks whether an app is marked as disabled in its manifest
is_disabled() {
	local app="$1"
	is_installed "$app" && app_info "$app" | jq -e '.disabled == true' >/dev/null
}

has_systemd() {
	is_installed "$1" && [ -e "$APPDIR/installed/$1/em-app-$1.service" ]
}

# Prints an error message and exits
error() {
	echo >&2 "empkg: $1"
	exit 1
}

log_journal() {
	local loglevel="$1"
	local message="$2"

	echo "$message" | systemd-cat -t "empkg" -p "$loglevel"
}

# Checks that an app is installed and exits with an error message otherwise
ensure_installed() {
	is_installed "$1" || error "app '$1' not found."
}

# Checks that an app is either installed or there is a leftover enabled symlink
ensure_installed_or_enabled() {
	local app="$1"
	( is_valid_name "$app" && [ -L "$APPDIR/enabled/$app" ] ) || ensure_installed "$app"
}

# Is called with the expected number of args and $#, exits with an error
# message if the number of args is incorrect
ensure_args() {
	[ "$1" -eq "$2" ] || {
		usage
		exit 1
	}
}

get_user_from_sdfile() {
	local sdfile="$1"
	local user

	if [ -e "$sdfile" ]; then
		# Get user if exists, use ^ symbol to ignore a setting of DynamicUser
		user="$(grep -e "^User=" "$sdfile" | awk -F '=' '{print $2}')"
		# Always use root if no user is set
		if [ -z "$user" ]; then
			user="root"
		fi
	else
		# Assume user=root if systemd service file does not exist
		user="root"
	fi

	echo "$user"
}

get_group_from_sdfile() {
	local sdfile="$1"
	local user="$2"
	local group

	group="$(grep -e "^Group=" "$sdfile" | awk -F '=' '{print $2}')"
	# Group equals user if no group is set
	if [ -z "$group" ]; then
		group="$user"
	fi

	echo "$group"
}

# Prints the manifest of an installed app
app_info() {
	local app="$1"
	ensure_installed "$app"
	cat "$APPDIR/installed/$app/manifest.json"
}

is_essential() {
	local app="$1"
	# The essential flag is ignored for non-builtin apps
	is_builtin "$app" && app_info "$app" | jq -e '.essential' >/dev/null
}

is_autostart() {
	local app="$1"
	# The autostart flag defaults to true
	is_enabled "$app" && app_info "$app" | jq -e '.autostart != false' >/dev/null
}


# Transforms a list of newline-separated strings to a JSON array
# (unless the --plain option is set)
output_array() {
	if $OPT_PLAIN; then
		cat
	else
		jq -nR '[inputs]'
	fi
}

# Prints the names of all installed apps, separated by newlines
list_installed() {
	local appdir
	for appdir in "$APPDIR"/installed/*; do
		# busybox does not have nullglob -
		# the case that no apps are installed is handled here
		[ -d "$appdir" ] || continue

		basename "$appdir"
	done
}

# Prints the names of all enabled apps, separated by newlines
list_enabled() {
	local app
	for app in $(list_installed); do
		is_enabled "$app" || continue
		echo "$app"
	done
}

# Prints the names of all apps that autostart their backend services, separated by newlines
list_autostart() {
	local app
	for app in $(list_installed); do
		is_autostart "$app" || continue
		echo "$app"
	done
}

list_apps() {
	local app
	local list
	for app in $(list_installed); do
		app="$app - $(app_info "$app" | jq -re '.version')"
		if [ -z "$list" ]; then
			list="$app"
		else
			list="$list
$app"
		fi
	done
	echo "$list"
}

# Updates the dbus policy provided by an app
app_dbus() {
	local app="$1"
	local conf="$APPDIR/installed/$app/dbus.conf"

	if [ -r "$conf" ] && is_enabled "$app"; then
		rm -rf "$APPTMP/dbus"
		mkdir -p "$APPTMP/dbus"

		cp -f "$conf" "$APPTMP/dbus/$app.conf"
		mv -f "$APPTMP/dbus/$app.conf" "$DBUSDIR/$app.conf"

		rm -rf "$APPTMP/dbus"
	else
		rm -f "$DBUSDIR/$app.conf"
	fi
}

# Registers an builtin app as installed
app_register() {
	local app="$1"
	is_builtin "$app" || error "tried to register app '$app', but it is not builtin."

	[ -e "$APPDIR/installed/$app" ] || ln -snf "$BUILTIN_DIR/$app" "$APPDIR/installed/$app"
}

# Enables an app
app_enable() {
	local app="$1"

	ensure_installed "$app"

	mkdir -p "$APPDIR/enabled"
	ln -snf "../installed/$app" "$APPDIR/enabled/$app"

	sync_app_user_and_dirs "$app"
	sync_app_acl_perms "$app"
	app_dbus "$app"

	if $OPT_SYSTEMD && has_systemd "$app"; then
		# request 'systemctl daemon-reload' for later
		touch "$REQUEST_DAEMON_RELOAD"

		# postpone app restarts until services reloaded
		if is_autostart "$app"; then
			echo "restart em-app-${app}.service" >> "$REQUEST_DAEMON_RELOAD"
		else
			# Only restart service if active
			echo "try-restart em-app-${app}.service" >> "$REQUEST_DAEMON_RELOAD"
		fi
	fi
}

# Disables an app
app_disable() {
	local app="$1"
	ensure_installed_or_enabled "$app"

	! is_essential "$app" || error "unable to disable essential app '$app'."

	rm -f "$APPDIR/enabled/$app"

	if $OPT_SYSTEMD && systemctl --quiet is-active "em-app-${app}.service"; then
		systemctl stop "em-app-${app}.service" || true
		# request 'systemctl daemon-reload' for later
		touch "$REQUEST_DAEMON_RELOAD"
	fi

	app_dbus "$app"
}

# Prints the current status and manifest information of an installed app
app_status() {
	local app="$1"
	ensure_installed "$app"

	local builtin=null
	if is_builtin "$app"; then builtin=true; fi

	local enabled=false
	if is_enabled "$app"; then enabled=true; fi

	app_info "$app" | jq \
		--argjson builtin "$builtin" \
		--argjson enabled "$enabled" \
		'{
			status: {
				builtin: $builtin,
				enabled: $enabled,
			} | with_entries(select(.value != null)),
			info: .,
		}'
}

# Prints a dictionaly containing the current status and manifest information of all installed apps
app_status_all() {
	local app
	for app in $(list_installed); do
		app_status "$app"
	done | jq -n '[inputs] | map({key: .info.id, value: .}) | from_entries'
}

# Prints the manifest of an app package
pkg_info() {
	local pkg="$1"
	tar -xOf "$pkg" manifest.json
}

# Installs or upgrades an app from a package file
pkg_install() {
	local pkg="$1"

	local info app arch
	info="$(pkg_info "$pkg")"
	if [ -z "$info" ]; then
		echo >&2 "Unable to install '$pkg': failed to read manifest"
		return 1
	fi

	app="$(echo "$info" | jq -r '.id')"
	if [ -z "$app" ]; then
		echo >&2 "Unable to install '$pkg': invalid manifest"
		return 1
	fi

	arch="$(echo "$info" | jq -r '.arch')"
	if ! is_arch_supported "$arch"; then
		echo >&2 "Unable to install '$pkg': unsupported platform '$arch'"
		return 1
	fi

	local version_old version_new
	version_new="$(echo "$info" | jq -r '.version')"

	local is_new=true
	if is_installed "$app"; then
		is_new=false
		version_old="$(app_info "$app" | jq -r '.version')"
	fi

	rm -rf "$APPTMP"

	if $is_new; then
		echo >&2 "Installing app: $app $version_new..."
		log_journal "notice" "Installing app: $app $version_new..."
	else
		echo >&2 "Updating app: $app from $version_old to $version_new..."
		log_journal "notice" "Updating app: $app from $version_old to $version_new..."
	fi

	local appdir="$APPDIR/installed/$app"
	local installdir="$APPTMP/install"

	mkdir -p "$installdir"
	tar -xOf "$pkg" data.tar.xz | tar -xJC "$installdir"
	tar -xf "$pkg" -C "$installdir" manifest.json

	# Sync around app replacement to get it as atomic as possible
	sync
	if [ -e "$appdir" ]; then
		mv "$appdir" "$APPTMP/uninstall"
	fi
	mv "$APPTMP/install" "$appdir"
	sync

	rm -rf "$APPTMP"

	if $OPT_ENABLE; then
		if ! is_disabled "$app"; then
			# app_enable contains a app_dbus call
			app_enable "$app" || true
		fi
	else
		app_dbus "$app"
	fi
}

# Uninstalls an app
app_uninstall() {
	local app="$1"

	ensure_installed_or_enabled "$app"
	echo >&2 "Uninstalling $app..."

	if is_essential "$app"; then
		echo >&2 "Note: '$app' is essential, it will not be disabled."
	else
		app_disable "$app"
	fi

	rm -rf "$APPTMP"
	mkdir -p "$APPTMP"
	# Move inside the same filesystem to have an atomic operation
	mv "$APPDIR/installed/$app" "$APPTMP/uninstall"

	if is_builtin "$app"; then
		echo >&2 "Note: '$app' is builtin, only uninstalling updates."
		app_register "$app"
	fi

	sync_app_user_and_dirs "$app"
	app_dbus "$app"

	# Sync before removing directory tree, so the removal at
	# APPDIR/installed is always atomic
	sync

	rm -rf "$APPTMP"
}

# Registers all builtin apps into the main app dir, removes
# symlinks for apps that have disappeared. New apps are automatically
# enabled.
#
# This is an internal command (called from emos-init), so it does not
# appear in usage
app_sync() {
	local appdir app conf new_apps

	# Disable apps that are not installed anymore
	for appdir in "$APPDIR"/enabled/*; do
		[ -L "$appdir" ] || continue
		app="$(basename "$appdir")"

		is_installed "$app" || app_disable "$app"
	done

	# Remove installed symlinks for apps that are not
	# builtin anymore
	for appdir in "$APPDIR"/installed/*; do
		[ -L "$appdir" ] || continue
		app="$(basename "$appdir")"

		[ -d "$BUILTIN_DIR/$app" ] || rm -f "$appdir"
	done

	mkdir -p "$APPDIR/installed/"
	mkdir -p "$DBUSDIR"

	# Link builtin apps into $APPDIR/installed
	for appdir in "$BUILTIN_DIR"/*; do
		# busybox does not have nullglob -
		# the case that no apps are installed is handled here
		# (as well as other unexpected files in BUILTIN_DIR)
		[ -d "$appdir" ] || continue

		app="$(basename "$appdir")"
		if [ -e "$APPDIR/installed/$app" ] && ! is_essential "$app"; then
			continue
		fi

		app_register "$app"

		new_apps="$app
$new_apps"
	done

	# Remove obsolete D-Bus policy files
	for conf in "$DBUSDIR"/*; do
		app="$(basename "$conf" .conf)"
		is_enabled "$app" || rm -f "$conf"
	done

	for app in $(list_enabled); do
		sync_app_user_and_dirs "$app"
		app_dbus "$app"
	done

	for app in $(list_enabled); do
		sync_app_acl_perms "$app"
	done

	# Delay enabling apps until all new apps have been registered,
	# so potential dependencies between new apps are satisfied
	echo -n "$new_apps" | while read -r app; do
		if ! is_disabled "$app"; then
			app_enable "$app" || true
		fi
	done

	if $OPT_EOL; then
		for app in $(list_enabled); do
			is_essential "$app" || app_disable "$app"
		done
	fi
}

# Updates the web-container app directory (app symlinks, list JSON, langs JSON)
update_www() {
	WWWDIRTMP="$(mktemp -d)"
	WWWAPPSTMP="$WWWDIRTMP/apps.plain"
	WWWLANGTMP="$WWWDIRTMP/langs.plain"

	local app

	# prepare next WWWDIR in temporary location
	for app in $(list_enabled); do
		local index="$APPDIR/installed/$app/www/index.js"
		[ -r "$index" ] || continue

		local lang="$APPDIR/installed/$app/www/i18n/lang.js"
		[ -r "$lang" ] || continue

		local wwwdir="$(dirname "$index")"
		ln -snf "$wwwdir" "$WWWDIRTMP/$app"

		echo "$app/index.js?$(md5sum "$index" | awk '{print $1}')" >> "$WWWAPPSTMP"
		echo "$app/i18n/lang.js?$(md5sum "$lang" | awk '{print $1}')" >> "$WWWLANGTMP"
	done

	sync

	# update WWWDIR
	rm -f "$WWWDIR"/*
	# create WWWDIR for factory-reset case
	mkdir -p "$WWWDIR"

	jq -nRc '[inputs]' "$WWWAPPSTMP" > "$WWWAPPS"
	rm "$WWWAPPSTMP"

	jq -nRc '[inputs]' "$WWWLANGTMP" > "$WWWLANG"
	rm "$WWWLANGTMP"

	# move remaining files (symlinks)
	mv "$WWWDIRTMP"/* "$WWWDIR"

	sync

	rm -rf "$WWWDIRTMP"
}

update_licenses() {
	LICDIRTMP="$(mktemp -d)"

	local app

	for app in $(list_installed); do
		local app_license_dir="$APPDIR/installed/$app/license"
		[ -d "$app_license_dir" ] || continue

		local lic_info_dir="$LICDIRTMP/$app"
		ln -snf "$app_license_dir" "$lic_info_dir"
	done

	sync
	rm -f "$LICDIR"/*
	mkdir -p "$LICDIR"
	mv "$LICDIRTMP"/* "$LICDIR"
	sync
}

process_reload_request() {
	local cmd
	local app

	if [ -f "$REQUEST_DAEMON_RELOAD" ]; then
		systemctl daemon-reload

		while read -r cmd app; do
			systemctl "$cmd" "$app"
		done < "$REQUEST_DAEMON_RELOAD"

		rm "$REQUEST_DAEMON_RELOAD"
	fi
}

init_dirs() {
	# Create config app and userdb directory
	mkdir -p "$CONFIGDIR" "$RUNDIRAPPS" "$USERDBRUNDIR" "$USERDBSTOREDIR"

	# Mount userdb directory into path which is known to systemd
	mount --bind "$USERDBSTOREDIR" "$USERDBRUNDIR"
}

# Create nss user entry and link
create_user_entry() {
	local appname="$1"
	local userid="$2"
	local groupid="$3"
	local userfile="$4"

	# uid/gid have to be numbers
	jq -nc --arg name "$appname" --argjson uid "$userid" --argjson gid "$groupid" \
		'{userName: $name, uid: $uid, gid: $gid, disposition: "reserved", locked: true}' \
		> "$USERDBRUNDIR/$userfile"
	ln -snf "./$userfile" "$USERDBRUNDIR/$userid.user"
}

# Create nss group entry and link
create_group_entry() {
	local groupname="$1"
	local groupid="$2"
	local groupfile="$3"

	# gid hase to be a number
	jq -nc --arg name "$groupname" --argjson gid "$groupid" \
		'{groupName: $name, gid: $gid, disposition: "reserved"}' \
		> "$USERDBRUNDIR/$groupfile"
	ln -snf "./$groupfile" "$USERDBRUNDIR/$groupid.group"
}

# Get one free id which can be used for user and/or group id
get_free_user_group_id() {
	local id=10000 stop_id=11000

	while [ $id -ne $stop_id ];do
		if [ ! -e "$USERDBRUNDIR/$id.user" ] && [ ! -e "$USERDBRUNDIR/$id.group" ]; then
			break
		else
			id=$((id+1))
		fi
	done

	echo $id
}

# Get gid from existing group entry
get_gid_from_group_entry() {
	local groupfile="$1"
	jq -r '.gid' "$USERDBRUNDIR/$groupfile"
}

# Get uid from existing user entry
get_uid_from_user_entry() {
	local userfile="$1"
	jq -r '.uid' "$USERDBRUNDIR/$userfile"
}

list_own_permissions_from_manifest() {
	jq -r '.permissions.own[]' "$1" 2> /dev/null
}

list_rw_permissions_from_manifest() {
	jq -r '.permissions.rw[]' "$1" 2> /dev/null
}

list_ro_permissions_from_manifest() {
	jq -r '.permissions.ro[]' "$1" 2> /dev/null
}

# Synchronize user and directories
sync_app_user_and_dirs() {
	local app="$1"

	if ! has_systemd "$app"; then
		return
	fi

	# Get user and group from systemd service file
	local sdfile="$APPDIR/installed/$app/em-app-$app.service"
	local user group
	user="$(get_user_from_sdfile "$sdfile")"
	group="$(get_group_from_sdfile "$sdfile" "$user")"

	sync_app_user "$app" "$user" "$group"

	# handle app requested directory permissions
	local manifest="$APPDIR/installed/$app/manifest.json"

	for dir in $(list_own_permissions_from_manifest "$manifest"); do
		if [ "$dir" = "$RUNDIRAPPS/$app" ] \
			|| [ "$dir" = "$CONFIGDIR/$app" ] \
			|| [ "$dir" = "/data/apps/$app" ]; then
			mkdir -p "$dir"
			chown -R "$user:$group" "$dir"
			# grant execution access for nginx user 'www' to display frontend
			[ "$dir" = "$RUNDIRAPPS/$app" ] && setfacl -m "u:www:x" "$dir" || true
		else
			error "$app: Cannot create own-group directory: '$dir' is no own directory."
		fi
	done

	# keep empkg backwards compatible to apps without path permissions in manifest
	if [ "$(list_own_permissions_from_manifest "$manifest" | wc -l)" -eq "0" ]; then
		echo >/dev/kmsg "empkg: Creating own directories (legacy mode). Please update $app to path permissions."
		sync_app_dirs "$app" "$user" "$group"
	fi
}

sync_app_acl_perms() {
	local app="$1"
	local manifest="$APPDIR/installed/$app/manifest.json"
	# Get user from systemd service file
	local sdfile="$APPDIR/installed/$app/em-app-$app.service"
	local user
	user="$(get_user_from_sdfile "$sdfile")"

	for dir in $(list_rw_permissions_from_manifest "$manifest"); do
		if [ -d "$dir" ]; then
			setfacl -Rm "u:$user:rwx" "$dir" || true
		else
			error "$app: Cannot assign rw access: '$dir' does not exist."
		fi
	done

	for dir in $(list_ro_permissions_from_manifest "$manifest"); do
		if [ -d "$dir" ]; then
			setfacl -Rm "u:$user:r-x" "$dir" || true
		else
			error "$app: Cannot assign ro access: '$dir' does not exist."
		fi
	done
}

# Synchronize user to systemd
sync_app_user() {
	local app="$1"
	local user="$2"
	local group="$3"

	local groupfile="$group.group"
	local userfile="$user.user"

	local groupid userid
	# Handle group entry first as a common group may already exist
	if [ "$group" != "root" ]; then
		if [ ! -e "$USERDBRUNDIR/$groupfile" ]; then
			groupid="$(get_free_user_group_id)"
			create_group_entry "$group" "$groupid" "$groupfile"
		else
			# Get groupid for a common group
			groupid="$(get_gid_from_group_entry "$groupfile")"
		fi
	else
		# Set gid for root
		groupid=0

		# Removing groups/group-ids from persistent storage is not supported for now
		# in order to protect against reassignment of group-ids from uninstalled to new apps
		# and the inheritance of corresponding file permissions tied to these ids.
	fi

	# User entry always needs a groupid, so it is always handled after the group entry
	if [ "$user" != "root" ]; then
		if [ "$user" = "$group" ]; then
			userid="$groupid"
		else
			userid="$(get_free_user_group_id)"
		fi

		if [ ! -e "$USERDBRUNDIR/$userfile" ]; then
			create_user_entry "$user" "$userid" "$groupid" "$userfile"
		fi

		# Removing users/user-ids from persistent storage is not supported for now
		# in order to protect against reassignment of user-ids from uninstalled to new apps
		# and the inheritance of corresponding file permissions tied to these ids.
	fi
}

# Create runtime and working directory including permissions and ownership
sync_app_dirs() {
	local app="$1"
	local user="$2"
	local group="$3"

	# Ensure existence of runtime and working directory
	( umask 0007 && mkdir -p "$RUNDIRAPPS/$app" )
	( umask 0077 && mkdir -p "$CONFIGDIR/$app" )

	# Permit execution for www-user
	setfacl -m 'u:www:x' "$RUNDIRAPPS/$app"

	# Set ownership
	chown -R "$user:$group" "$CONFIGDIR/$app" "$RUNDIRAPPS/$app"
}

# shellcheck disable=SC3057
while [ "${1:0:1}" = '-' ]; do
	arg="$1"; shift
	case "$arg" in
	--no-enable)
		OPT_ENABLE=false
		;;

	--no-systemd)
		OPT_SYSTEMD=false
		;;

	--plain)
		OPT_PLAIN=true
		;;

	--set-eol)
		OPT_EOL=true
		;;

	*)
		usage
		exit 1
	esac
done


get_lock() {
	# Arbitrary lock fd that should be unused by the shell
	# shellcheck disable=SC3023
	exec 1000>/var/lock/empkg.lock
	flock -n 1000 || error 'another instance of empkg is active.'
}


cmd="$1"; shift

case "$cmd" in
help)
	usage
	;;

list-installed)
	list_installed | output_array
	;;

list-enabled)
	list_enabled | output_array
	;;

list-autostart)
	list_autostart | output_array
	;;

list)
	list_apps
	;;

is-installed)
	ensure_args 1 $#
	is_installed "$1"
	;;
is-enabled)
	ensure_args 1 $#
	is_enabled "$1"
	;;
status)
	if [ $# -eq 0 ]; then
		app_status_all
	else
		ensure_args 1 $#
		app_status "$1"
	fi
	;;

info)
	ensure_args 1 $#
	pkg_info "$1" | jq .
	;;

install)
	ensure_args 1 $#
	get_lock
	pkg_install "$1"
	process_reload_request
	update_www
	update_licenses
	;;

uninstall)
	ensure_args 1 $#
	get_lock
	app_uninstall "$1"
	process_reload_request
	update_www
	update_licenses
	;;

enable)
	ensure_args 1 $#
	get_lock
	app_enable "$1"
	process_reload_request
	update_www
	;;

disable)
	ensure_args 1 $#
	get_lock
	app_disable "$1"
	process_reload_request
	update_www
	;;

sync)
	get_lock
	init_dirs
	app_sync
	process_reload_request
	update_www
	update_licenses
	;;

*)
	usage
	exit 1
esac
